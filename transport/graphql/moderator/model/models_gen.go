// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Answer struct {
	ID         uint64   `json:"id"`
	SurveyID   uint64   `json:"surveyID"`
	QuestionID uint64   `json:"questionID"`
	UserID     uint64   `json:"userID"`
	Answer     *string  `json:"answer"`
	Options    []string `json:"options"`
}

type Condition struct {
	Field    string `json:"field"`
	Operator string `json:"operator"`
	Sample   string `json:"sample"`
}

type ConditionInput struct {
	Field    string `json:"field"`
	Operator string `json:"operator"`
	Sample   string `json:"sample"`
}

type CreateSurveyInput struct {
	Description string            `json:"description"`
	Questions   []*QuestionInput  `json:"questions"`
	Conditions  []*ConditionInput `json:"conditions"`
}

type Question struct {
	ID         uint64       `json:"id"`
	Question   string       `json:"question"`
	Type       string       `json:"type"`
	Options    []string     `json:"options"`
	Conditions []*Condition `json:"conditions"`
}

type QuestionInput struct {
	Question   string            `json:"question"`
	Type       string            `json:"type"`
	Options    []string          `json:"options"`
	Conditions []*ConditionInput `json:"conditions"`
}

type Survey struct {
	ID          uint64       `json:"id"`
	Description string       `json:"description"`
	Status      SurveyStatus `json:"status"`
	Questions   []*Question  `json:"questions"`
	Conditions  []*Condition `json:"conditions"`
}

type SurveyStatus string

const (
	SurveyStatusNew       SurveyStatus = "new"
	SurveyStatusPublished SurveyStatus = "published"
	SurveyStatusAccepted  SurveyStatus = "accepted"
	SurveyStatusRefused   SurveyStatus = "refused"
	SurveyStatusClosed    SurveyStatus = "closed"
)

var AllSurveyStatus = []SurveyStatus{
	SurveyStatusNew,
	SurveyStatusPublished,
	SurveyStatusAccepted,
	SurveyStatusRefused,
	SurveyStatusClosed,
}

func (e SurveyStatus) IsValid() bool {
	switch e {
	case SurveyStatusNew, SurveyStatusPublished, SurveyStatusAccepted, SurveyStatusRefused, SurveyStatusClosed:
		return true
	}
	return false
}

func (e SurveyStatus) String() string {
	return string(e)
}

func (e *SurveyStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurveyStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurveyStatus", str)
	}
	return nil
}

func (e SurveyStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
